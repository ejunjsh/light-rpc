<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                     http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
                     http://www.springframework.org/schema/context
                     http://www.springframework.org/schema/context/spring-context-3.0.xsd
                     http://www.springframework.org/schema/aop
                     http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
                     http://www.springframework.org/schema/tx
                     http://www.springframework.org/schema/tx/spring-tx-3.0.xsd">

    <context:component-scan base-package="com.sky.test"/>

    <context:property-placeholder location="classpath:config.properties"/>

    <!-- 配置服务发现组件 -->
    <bean id="serviceDiscovery" class="com.sky.light4j.client.ServiceDiscovery">
        <constructor-arg name="registryAddress" value="${registry.address}"/>
    </bean>

    <bean id="rpcClient" class="com.sky.light4j.client.RpcClient" destroy-method="destroy">
        <constructor-arg name="serviceDiscovery" ref="serviceDiscovery"/>
        <constructor-arg name="serialization">
            <!--<bean class="com.sky.light4j.serialization.impl.ProtostuffSerialization" />-->
            <!--<bean class="com.sky.light4j.serialization.impl.JdkSerialization" />-->
            <!--<bean class="com.sky.light4j.serialization.impl.FastJsonSerialization" />-->
            <bean class="com.sky.light4j.serialization.impl.HessionSerialization" />
        </constructor-arg>
    </bean>

    <!-- 配置 RPC 代理 -->
    <bean id="rpcProxy" class="com.sky.light4j.proxy.Light4jProxyFactory">
        <constructor-arg name="client" ref="rpcClient"/>
    </bean>

</beans>